server.port = ${AMPPD_PORT:8200}
#server.servlet.context-path = /amppd

# Spring DATASOURCE (DataSourceAutoConfiguration & DataSourceProperties)
spring.jpa.database = POSTGRESQL
spring.datasource.driver-class-name = org.postgresql.Driver
spring.datasource.platform = postgres
spring.datasource.url = ${AMPPD_DB_URL:jdbc:postgresql://localhost:5432/username}
spring.datasource.username = ${AMPPD_DB_USERNAME:username}
spring.datasource.password = ${AMPPD_DB_PASSWORD:password}
#spring.datasource.initialization-mode = always

# Hibernate ddl auto (none, create, create-drop, validate, update), set it to create to initialize an env, then change to update afterwards
spring.jpa.generate-ddl = true
#spring.jpa.hibernate.ddl-auto = create
spring.jpa.hibernate.ddl-auto = ${AMPPD_DB_DDL:update}
spring.jpa.show-sql = true 
spring.jpa.properties.hibernate.format_sql = true
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
# Disable feature detection by this undocumented parameter. Check the org.hibernate.engine.jdbc.internal.JdbcServiceImpl.configure method for more details.
spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults = false
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation = true 

# Session timeout. If a duration suffix is not specified, seconds are used.
server.servlet.session.timeout = 1800s
spring.session.timeout = 1800s
# Session store type.
spring.session.store-type = jdbc
# Database schema initialization mode.
spring.session.jdbc.initialize-schema = always
# Path to the SQL file to use to initialize the database schema.
spring.session.jdbc.schema = classpath:org/springframework/session/jdbc/schema-@@platform@@.sql
# Name of the database table used to store sessions.
spring.session.jdbc.table-name = SPRING_SESSION

spring.servlet.multipart.max-file-size = 128KB
spring.servlet.multipart.max-request-size = 128KB
management.endpoints.web.exposure.include = *

spring.mail.host = smtp.gmail.com
spring.mail.port = 587
# TODO use environment variable for security properties
spring.mail.username = amppdiu@gmail.com
spring.mail.password = amppdiu@0119

# Other properties
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.connectiontimeout=5000
spring.mail.properties.mail.smtp.timeout=5000
spring.mail.properties.mail.smtp.writetimeout=5000

# TLS , port 587
spring.mail.properties.mail.smtp.starttls.enable=true

logging.level.org.springframework = INFO
logging.level.org.hibernate.type = trace
logging.level.org.hibernate.SQL = DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder = TRACE

# amppd specific properties
amppd.fileStorageRoot = ${AMPPD_FILE_ROOT:/tmp/amppd/}
amppd.dropboxRoot = ${AMPPD_DROPBOX_FILE_ROOT:/tmp/amppd/dropbox}
amppd.encryptionSecret = ${AMPPD_ENCRYPTION_SECRET:secret}   
amppd.username = ${AMPPD_MAIL_USERNAME:amppdiu@gmail.com}
amppd.password = ${AMPPD_MAIL_PASSWORD:password}
amppd.ampurl = ${AMPPD_UI_URL:http://localhost:8100/#}

# Galaxy specific properties
galaxy.host = ${GALAXY_HOST:localhost}  
galaxy.port = ${GALAXY_PORT:8300}
galaxy.username = ${GALAXY_USERNAME:username}
galaxy.password = ${GALAXY_PASSWORD:password}


# Note: 
# For each property above with a value from an environment variable, there're two options to handle them:
# 1.  Define each environment variable in your local OS system (for CI environment, in docker container config); or
# 2.  Overwrite each such property with the proper values in your local application-${env}.properties file
#     under the same directory as applicaton.properties; and set environment variable to specify the environment. For ex:#
# 2.1 The envTarget variable can be set in the OS/environment or as a parameter to the JVM command line: -DenvTarget=dev
# 2.2 Or it can be specified through mvn build argument: -Dspring.profiles.active=dev 
# Make extra sure that application-${env}.properties is never committed to VCS repository!!

# TODO TO make credentials more secure, we can consider encrypting them using JASYPT with Spring Boot


