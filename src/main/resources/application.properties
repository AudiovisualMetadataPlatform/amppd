server.port = ${AMPPD_PORT:8200}
server.servlet.context-path=/rest
server.tomcat.relaxed-path-chars=[,] 
server.tomcat.relaxed-query-chars=[,]
#spring.data.rest.basePath=/rest

# Spring DATASOURCE (DataSourceAutoConfiguration & DataSourceProperties)
spring.jpa.database = POSTGRESQL
spring.datasource.driver-class-name = org.postgresql.Driver
spring.sql.init.platform = postgres
spring.datasource.url = ${AMPPD_DB_URL:jdbc:postgresql://localhost:5432/username}
spring.datasource.username = ${AMPPD_DB_USERNAME:username}
spring.datasource.password = ${AMPPD_DB_PASSWORD:password}
#spring.datasource.initialization-mode = always

# Hibernate ddl auto (none, create, create-drop, validate, update), set it to create to initialize an env, then change to update afterwards
spring.jpa.generate-ddl = true
#spring.jpa.hibernate.ddl-auto = create
spring.jpa.hibernate.ddl-auto = ${AMPPD_DB_DDL:update}
spring.jpa.show-sql = true 
spring.jpa.properties.hibernate.format_sql = true
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
# Disable feature detection by this undocumented parameter. Check the org.hibernate.engine.jdbc.internal.JdbcServiceImpl.configure method for more details.
spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults = false
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation = true 
spring.jpa.properties.javax.persistence.validation.mode = none

# Session timeout. If a duration suffix is not specified, seconds are used.
server.servlet.session.timeout = 1800s
spring.session.timeout = 1800s
# SameSite Cookie Attribute
#server.servlet.session.cookie.same-site = none
# Session store type.
spring.session.store-type = jdbc
# Database schema initialization mode.
spring.session.jdbc.initialize-schema = always
# Path to the SQL file to use to initialize the database schema.
spring.session.jdbc.schema = classpath:org/springframework/session/jdbc/schema-@@platform@@.sql
# Name of the database table used to store sessions.
spring.session.jdbc.table-name = SPRING_SESSION

spring.servlet.multipart.max-file-size = 5GB
spring.servlet.multipart.max-request-size = 5GB
spring.servlet.multipart.enabled=true

management.endpoints.web.exposure.include = *

# Mail Properties
spring.mail.host=localhost
spring.mail.port=25
spring.mail.protocol=smtp
spring.mail.properties.mail.smtp.auth=false
spring.mail.properties.mail.smtp.starttls.enable=false
spring.mail.properties.mail.smtp.connectiontimeout=5000
spring.mail.properties.mail.smtp.timeout=3000
spring.mail.properties.mail.smtp.writetimeout=5000

#logging.level.root = INFO
#logging.level.org.springframework = INFO
#logging.level.org.hibernate.SQL = INFO
#logging.level.org.hibernate.type = INFO
#logging.level.org.hibernate.type.descriptor.sql.BasicBinder = DEBUG
logging.level.edu.indiana.dlib.amppd = TRACE
logging.path = /tmp/amppd/logs


# amppd-ui specific properties
amppdui.url = ${AMPPDUI_URL:http://localhost:8500/#}
amppdui.documentRoot = ${AMPPDUI_DOCUMENT_ROOT:/tmp/amppdui/}
amppdui.symlinkDir = ${AMPPDUI_SYMLINK_DIR:symlink}
amppdui.hmgmSecretKey = ${AMPPDUI_HMGM_SECRET_KEY:hmgmsecretkey}

# amppd specific properties
amppd.environment = ${AMPPD_ENVIRONMENT:dev}
amppd.fileStorageRoot = ${AMPPD_FILE_ROOT:/tmp/amppd/media}
amppd.dropboxRoot = ${AMPPD_DROPBOX_ROOT:/tmp/amppd/dropbox}
amppd.pythonPath = ${AMPPD_PYTHON_PATH:python3}
amppd.mediaprobeDir = ${AMPPD_MEDIAPROBE_DIR:../MediaProbe/}
amppd.encryptionSecret = ${AMPPD_ENCRYPTION_SECRET:encryptionSecret}
# AMP admin credentials
amppd.username = ${AMPPD_USERNAME:username}
amppd.password = ${AMPPD_PASSWORD:password}
amppd.adminEmail = ${AMPPD_ADMIN_EMAIL:adminEmail}
# AMP admin is the bootstrapped user account upon app start. 
# User account approval request will be sent to its email address, and the admin can login to process such requests.
amppd.url = ${AMPPD_URL:http://localhost:8200/rest}
amppd.corsOriginPattern = ${AMPPD_CORS_ORIGIN_PATTERN:}
amppd.auth = ${AMPPD_AUTH:true}
amppd.jwtSecret = ${AMPPD_JWT_SECRET:jwtSecret}
#amppd.workflowEditSecret = ${AMPPD_WORKFLOW_EDIT_SECRET:workflowEditSecret}
amppd.jwtExpireMinutes = 240
amppd.workflowEditMinutes = 60
amppd.resetPasswordMinutes = 10
amppd.activateAccountDays = 7
#amppd.refreshResultsStatusMinutes = 10
amppd.refreshResultsTableMinutes = 300
amppd.refreshResultsStatusCron = 0 0/10 6-18 ? * MON-FRI
amppd.refreshResultsTableCron = 0 0 1 ? * MON-FRI
# the set of supplement categories AMP currently handles, must match categories in Supplement MGM
amppd.supplementCategories = Face,Transcript,Vocabulary,Program,Other
# the set of groudtruth subcategories AMP currently handles, must match Groudtruth subcategories in Supplement MGM;
# if defined, they will be added as Groundtruth-subcategory to the supplement categories list
amppd.groundtruthSubcategories = segment_timecodes_labels,applause_timecodes_labels,stt_transcript,ner_all,ner_all-aws,ner_all_spacy,ner_unique,ner_unique_aws,ner_unique_spacy,shot_timecodes_labels,face_timecodes,face_labels,vocr_timecodes_texts,vocr_timecodes,vocr_texts,vocr_unique_texts,ner_all_common
# the set of external sources AMP currently supports
amppd.externalSources = MCO,DarkAvalon,NYPL
# the set of task managrs AMP currently supports
amppd.taskManagers = Jira,Trello

# Galaxy specific properties
galaxy.host = ${GALAXY_HOST:localhost}  
galaxy.port = ${GALAXY_PORT:8300}
galaxy.root = ${GALAXY_PORT:/rest/galaxy}
galaxy.userId = ${GALAXY_USERNAME:userId}
# AMP super Galaxy user for all Galaxy API calls 
galaxy.username = ${GALAXY_USERNAME:username}
galaxy.password = ${GALAXY_PASSWORD:password}
# Below AMP WorkflowEditUser is currently not used, instead, the AMP super Galaxy user above is used for workflow edit,
# to avoid complexity of access control in Galaxy. We can revert to use the below user as needed in the future.
#galaxy.usernameWorkflowEdit = ${GALAXY_USERNAME:usernameWorkflowEdit}
#galaxy.passwordWorkflowEdit = ${GALAXY_PASSWORD:passwordWorkflowEdit}

# Avalon specific properties
avalon.url = ${AVALON_URL: https://mco-dummy.dlib.indiana.edu}
avalon.token = ${AVALON_TOKEN: dummytoken}
 
# Note: 
# For each property above with a value from an environment variable, there're two options to handle them:
# 1.  Define each environment variable in your local OS system (for CI environment, in docker container config); or
# 2.  Overwrite each such property with the proper values in your local application-${env}.properties file
#     under the same directory as applicaton.properties; and set environment variable to specify the environment. For ex:#
# 2.1 The envTarget variable can be set in the OS/environment or as a parameter to the JVM command line: -DenvTarget=dev
# 2.2 Or it can be specified through mvn build argument: -Dspring.profiles.active=dev 
# Make extra sure that application-${env}.properties is never committed to VCS repository!!

# TODO TO make credentials more secure, we can consider encrypting them using JASYPT with Spring Boot


