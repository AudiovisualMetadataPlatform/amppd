server.port = ${AMPPD_PORT:8200}
#server.servlet.context-path = /amppd

# Spring DATASOURCE (DataSourceAutoConfiguration & DataSourceProperties)
spring.jpa.database = POSTGRESQL
spring.datasource.platform = postgres
spring.datasource.url = ${AMPPD_DB_URL:jdbc:postgresql://localhost:5432/username}
spring.datasource.username = ${AMPPD_DB_USERNAME:username}
spring.datasource.password = ${AMPPD_DB_PASSWORD:password}
#spring.datasource.initialization-mode = always

# Hibernate ddl auto (none, create, create-drop, validate, update), set it to create to initialize an env, then change to update afterwards
spring.jpa.generate-ddl = true
#spring.jpa.hibernate.ddl-auto = create
spring.jpa.hibernate.ddl-auto = ${AMPPD_DB_DDL:update}
spring.jpa.show-sql = true 
spring.jpa.properties.hibernate.format_sql = true
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect

spring.servlet.multipart.max-file-size = 128KB
spring.servlet.multipart.max-request-size = 128KB
management.endpoints.web.exposure.include = *

logging.level.org.springframework = INFO
logging.level.org.hibernate.type = trace
#logging.level.org.hibernate.SQL = DEBUG
#logging.level.org.hibernate.type.descriptor.sql.BasicBinder = TRACE

amppd.fileStorageRoot = ${AMPPD_FILE_ROOT:/tmp/amppd/}
encryption.cookie = ${ENCRYPTION_COOKIE:fgherty}

galaxy.host = ${GALAXY_HOST:localhost}
galaxy.port = ${GALAXY_PORT:8300}
galaxy.username = ${GALAXY_USERNAME:username}
galaxy.password = ${GALAXY_PASSWORD:password}

# Note: 
# For each property above with a value from an environment variable, there're two options to handle them:
# 1.  Define each environment variable in your local OS system (for CI environment, in docker container config); or
# 2.  Overwrite each such property with the proper values in your local application-${env}.properties file
#     under the same directory as applicaton.properties; and set environment variable to specify the environment. For ex:#
# 2.1 The envTarget variable can be set in the OS/environment or as a parameter to the JVM command line: -DenvTarget=dev
# 2.2 Or it can be specified through mvn build argument: -Dspring.profiles.active=dev 
# Make extra sure that application-${env}.properties is never committed to VCS repository!!

# TODO TO make credentials more secure, we can consider encrypting them using JASYPT with Spring Boot